<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JoyBoy&#39;s blog</title>
    <link>https://zyooo.github.io/</link>
    <description>Recent content on JoyBoy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://www.wangchucheng.com/&#34;&gt;WANG Chucheng&lt;/a&gt; and &lt;a href=&#34;https://www.ruiqima.com/&#34;&gt;MA Ruiqi&lt;/a&gt;
</copyright>
    <lastBuildDate>Mon, 28 Mar 2022 22:27:47 +0800</lastBuildDate><atom:link href="https://zyooo.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Test</title>
      <link>https://zyooo.github.io/note/test/</link>
      <pubDate>Mon, 28 Mar 2022 22:27:47 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/test/</guid>
      <description>2级 3级 4级 </description>
    </item>
    
    <item>
      <title>2022-02-28</title>
      <link>https://zyooo.github.io/leetcodedairy/20220228/</link>
      <pubDate>Mon, 28 Feb 2022 07:50:01 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220228/</guid>
      <description>1601.最多可达成的换楼请求目的 hard 对于每个选择, 都有选或者不选两个操作, delta数组记录每栋楼的员工变化量, 以及变量cnt记录被选择的请求数量, 如果选择当前请求, delta[x]值减1, delta[y]加1, 不选择则不做操作, 枚举完了之后判断delta中所有值是否为0, 并且根据cnt和res大小更新答案.</description>
    </item>
    
    <item>
      <title>第282场周赛T3</title>
      <link>https://zyooo.github.io/leetcodedairy/20220227/</link>
      <pubDate>Sun, 27 Feb 2022 17:28:07 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220227/</guid>
      <description>这道题用O(N^2)的解法会超时, 所以要想办法降低时间复杂度, 所以使用二分法, 但是这里二分的不是time数组, 而是时间, 而时间的区间如何取定呢, 先把time升序排序, 然后最短的可能是1s, 最长的时间可能是time[0] * totoalTrips, 所以就可以采用二分法了</description>
    </item>
    
    <item>
      <title>2022-02-24</title>
      <link>https://zyooo.github.io/leetcodedairy/20220224/</link>
      <pubDate>Thu, 24 Feb 2022 21:54:42 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220224/</guid>
      <description>开始是直接遍历的方法得到数字, 后来想着如果是严格按照一个形式的话, 那么 一个复数中只会出现一个 &amp;lsquo;+&amp;rsquo;
并且将虚部和实部分割, 可以利用这个去直接得到abcd, 不过不知道底层代码, 估计速度也是差不多的
代码: 100% 100%</description>
    </item>
    
    <item>
      <title>2022-02-08</title>
      <link>https://zyooo.github.io/leetcodedairy/20220208/</link>
      <pubDate>Sun, 20 Feb 2022 20:07:20 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220208/</guid>
      <description>1001.网格照明 hard 2022.02.08 数据规模太大了, 原本想着硬模拟的后来还是放弃了
打算用map去存储行列和两个对角的情况, 但是又不知道怎么去表示同一条对角
官方题解:
func gridIllumination(n int, lamps, queries [][]int) []int { type pair struct{ x, y int } points := map[pair]bool{} row := map[int]int{} col := map[int]int{} diagonal := map[int]int{} antiDiagonal := map[int]int{} for _, lamp := range lamps { r, c := lamp[0], lamp[1] p := pair{r, c} if points[p] { continue } points[p] = true row[r]++ col[c]++ //用这个来表示哪条对角, 妙啊 diagonal[r-c]++ antiDiagonal[r+c]++ } ans := make([]int, len(queries)) for i, query := range queries { r, c := query[0], query[1] if row[r] &amp;gt; 0 || col[c] &amp;gt; 0 || diagonal[r-c] &amp;gt; 0 || antiDiagonal[r+c] &amp;gt; 0 { ans[i] = 1 } for x := r - 1; x &amp;lt;= r+1; x++ { for y := c - 1; y &amp;lt;= c+1; y++ { if x &amp;lt; 0 || y &amp;lt; 0 || x &amp;gt;= n || y &amp;gt;= n || !</description>
    </item>
    
    <item>
      <title>2022-01-09</title>
      <link>https://zyooo.github.io/leetcodedairy/20220109/</link>
      <pubDate>Sun, 09 Jan 2022 20:34:58 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220109/</guid>
      <description>田忌赛马,打不过就送人头 代码逻辑
n := len(nums1) sort.Ints(nums1) //田忌的马 sort.Ints(nums2) //齐王的马 for i := n-1; i &amp;gt;= 0; i-- { if nums1[i] &amp;gt; nums2[i] { //比得过跟他比 } else { //比不过,换的垫底的来送人头 } } int[] advantageCount(int[] nums1, int[] nums2) { int n = nums1.</description>
    </item>
    
    <item>
      <title>2022-01-09</title>
      <link>https://zyooo.github.io/leetcodedairy/20220108/</link>
      <pubDate>Sun, 09 Jan 2022 20:34:54 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220108/</guid>
      <description>滑动窗口问题 int left = 0, right = 0 for right &amp;lt; len(s) { //增大窗口 window.</description>
    </item>
    
    <item>
      <title>2022-01-09</title>
      <link>https://zyooo.github.io/leetcodedairy/20220107/</link>
      <pubDate>Sun, 09 Jan 2022 20:34:51 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220107/</guid>
      <description>二分搜索 //搜素左侧边界 func left_bound(nums []int, target int){ if len(nums) == 0 { return -1 } left, right := 0,len(nums) for left &amp;lt; right{ mid := left + (right - left) / 2 if nums[mid] == target{ //找到target时,收缩右侧边界 right = mid }else if nums[mid] &amp;lt; target{ left = mid + 1 }else if nums[mid] &amp;gt; target{ right = mid } } return left } // nums = [1,2,3,3,3,5,7,] target = 3 return 2 //搜索右侧边界 func right_bound(nums int[], target int){ if len(nums) == 0 { return -1 } left, right := 0,len(nums) for left &amp;lt; right{ mid := left + (right - left) / 2 if nums[mid] == target{ //找到target时,收缩左侧边界 left = mid + 1 }else if nums[mid] &amp;lt; target{ left = mid + 1 }else if nums[mid] &amp;gt; target{ right = mid } } return left } // nums = [1,2,3,3,3,5,7,] target = 3 return 4  技巧: 从题目中抽象出一个自变量x , 一个关于x的函数f(x), 以及一个目标值 target , 同时还要满足以下条件 : 1.</description>
    </item>
    
    <item>
      <title>2022-01-06</title>
      <link>https://zyooo.github.io/leetcodedairy/20220106/</link>
      <pubDate>Thu, 06 Jan 2022 11:18:06 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220106/</guid>
      <description>15.三数之和 穷举,确定了第一个数字之后, 剩下两个数字就是 target = target - nums[i] 的twoSum问题
func twoSumTarget2(nums []int, start, target int) [][]int { var ans [][]int //sort.</description>
    </item>
    
    <item>
      <title>2022-01-05</title>
      <link>https://zyooo.github.io/leetcodedairy/20220105/</link>
      <pubDate>Wed, 05 Jan 2022 07:49:09 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220105/</guid>
      <description>1576.替换所有的问号 func modifyString(s string) string { data := []byte(s) for i := 0; i &amp;lt; len(data); i++ { if data[i] == &#39;?</description>
    </item>
    
    <item>
      <title>2022-01-04</title>
      <link>https://zyooo.github.io/leetcodedairy/20220104/</link>
      <pubDate>Tue, 04 Jan 2022 07:46:10 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220104/</guid>
      <description>19.删除链表的倒数第N个节点 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func removeNthFromEnd(head *ListNode, n int) *ListNode { dummy := new(ListNode) dummy.</description>
    </item>
    
    <item>
      <title>2022-01-03</title>
      <link>https://zyooo.github.io/leetcodedairy/20220103/</link>
      <pubDate>Mon, 03 Jan 2022 18:29:12 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20220103/</guid>
      <description>1185.一周中的第几天 难度简单92
给你一个日期，请你设计一个算法来判断它是对应一周中的哪一天。
输入为三个整数：day、month 和 year，分别表示日、月、年。
您返回的结果必须是这几个值中的一个 {&amp;quot;Sunday&amp;quot;, &amp;quot;Monday&amp;quot;, &amp;quot;Tuesday&amp;quot;, &amp;quot;Wednesday&amp;quot;, &amp;quot;Thursday&amp;quot;, &amp;quot;Friday&amp;quot;, &amp;quot;Saturday&amp;quot;}。</description>
    </item>
    
    <item>
      <title>Go_Day1</title>
      <link>https://zyooo.github.io/golangdairy/go_day1/</link>
      <pubDate>Thu, 30 Dec 2021 16:13:04 +0800</pubDate>
      
      <guid>https://zyooo.github.io/golangdairy/go_day1/</guid>
      <description>Hello, golang! Hello world package main //有main函数的话这里一定要有main import &amp;quot;fmt&amp;quot; //一个项目一个main函数，和c一样，与java不同 func main() { fmt.</description>
    </item>
    
    <item>
      <title>2021-11-17</title>
      <link>https://zyooo.github.io/leetcodedairy/20211117/</link>
      <pubDate>Wed, 17 Nov 2021 12:15:12 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20211117/</guid>
      <description>318.最大单词长度乘积 给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/maximum-product-of-word-lengths 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处.</description>
    </item>
    
    <item>
      <title>Day6-2021-11-15</title>
      <link>https://zyooo.github.io/leetcodedairy/20211115/</link>
      <pubDate>Mon, 15 Nov 2021 10:58:22 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20211115/</guid>
      <description>319.灯泡开关 @脑筋急转弯
初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。 找出并返回 n 轮后有多少个亮着的灯泡。 来源：力扣（LeetCode） 链接：https://leetcode-cn.</description>
    </item>
    
    <item>
      <title>Tomcat</title>
      <link>https://zyooo.github.io/bugs/tomcat/</link>
      <pubDate>Wed, 10 Nov 2021 17:16:39 +0800</pubDate>
      
      <guid>https://zyooo.github.io/bugs/tomcat/</guid>
      <description>修改Tomcat的默认端口和启动项目 修改默认端口 1.首先查看80端口是否被占用
netstat -lntp | grep 80  2.进入tomcat安装目录下的conf文件夹修改server.xml文件</description>
    </item>
    
    <item>
      <title>2021-11-05</title>
      <link>https://zyooo.github.io/leetcodedairy/20211105/</link>
      <pubDate>Fri, 05 Nov 2021 12:21:38 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20211105/</guid>
      <description>重塑矩阵 在 MATLAB 中，有一个非常有用的函数 reshape ，它可以将一个 m x n 矩阵重塑为另一个大小不同（r x c）的新矩阵，但保留其原始数据。 给你一个由二维数组 mat 表示的 m x n 矩阵，以及两个正整数 r 和 c ，分别表示想要的重构的矩阵的行数和列数。 重构后的矩阵需要将原始矩阵的所有元素以相同的 行遍历顺序 填充。 如果具有给定参数的 reshape 操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。 示例 1： 输入：mat = [[1,2],[3,4]], r = 1, c = 4 输出：[[1,2,3,4]] 来源：力扣（LeetCode） 链接：https://leetcode-cn.</description>
    </item>
    
    <item>
      <title>2021-11-04</title>
      <link>https://zyooo.github.io/leetcodedairy/20211104/</link>
      <pubDate>Thu, 04 Nov 2021 20:40:11 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20211104/</guid>
      <description>两个数组的交集 给定两个数组，编写一个函数来计算它们的交集。 示例 1： 输入：nums1 = [1,2,2,1], nums2 = [2,2] 输出：[2,2] 示例 2: 输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4] 输出：[4,9] 说明： 输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。 我们可以不考虑输出结果的顺序。 来源：力扣（LeetCode） 链接：https://leetcode-cn.</description>
    </item>
    
    <item>
      <title>2021-11-03</title>
      <link>https://zyooo.github.io/leetcodedairy/20211103/</link>
      <pubDate>Wed, 03 Nov 2021 19:59:17 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20211103/</guid>
      <description>合并两个有序数组 给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</description>
    </item>
    
    <item>
      <title>2021-10-31</title>
      <link>https://zyooo.github.io/leetcodedairy/20211031/</link>
      <pubDate>Sun, 31 Oct 2021 21:22:51 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20211031/</guid>
      <description>最大子序和 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
示例: 输入：nums = [-2,1,-3,4,-1,2,1,-5,4] 输出：6 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。  用贪心算法去解决此问题,遍历数组,得到当前的值,如果lastCount小于零的话就抛弃,当前和就等于当前值,如果lastCount大于等于0的话就和当前值相加作为当前和,lastCount等于当前和,当前和和最大和比较,得出最大和,遍历完一边之后返回最大和.</description>
    </item>
    
    <item>
      <title>OralEnglish</title>
      <link>https://zyooo.github.io/note/oralenglish/</link>
      <pubDate>Wed, 20 Oct 2021 12:25:53 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/oralenglish/</guid>
      <description>Day 1 Success means different things for different people, some may equate it with fame, some with wealth and still some with accomplishments.</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://zyooo.github.io/javadairy/nginx/</link>
      <pubDate>Sun, 17 Oct 2021 19:29:27 +0800</pubDate>
      
      <guid>https://zyooo.github.io/javadairy/nginx/</guid>
      <description>Nginx 1.课程目标 目标1：掌握Nginx的安装
目标2：掌握Nginx的静态网站部署
目标3：理解Nginx的反向代理与负载均衡，能够配置反向代理与负载均衡
2.Nginx的安装与启动 2.1什么是Nginx Nginx 是一款高性能的 http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师伊戈尔·西索夫（Igor Sysoev）所开发，官方测试 nginx 能够支支撑 5 万并发链接，并且 cpu、内存等资源消耗却非常低，运行非常稳定。</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://zyooo.github.io/note/linux/</link>
      <pubDate>Sun, 17 Oct 2021 09:12:25 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/linux/</guid>
      <description>Linux学习 输入ifconfig 查询ip地址,以后用于远程连接,我的192.168.122.128,使用CRT去远程连接服务器.
常用命令 文件里有文档可以查
cd
pwd
li
li -a</description>
    </item>
    
    <item>
      <title>travel</title>
      <link>https://zyooo.github.io/javadairy/example/</link>
      <pubDate>Wed, 13 Oct 2021 11:03:43 +0800</pubDate>
      
      <guid>https://zyooo.github.io/javadairy/example/</guid>
      <description>黑马旅游网案例 注册 &amp;lt;script&amp;gt; /* * 表单校验： * 1.用户名：单词字符，长度8到20位 * 2.密码：单词字符，长度8到20位 *	3.</description>
    </item>
    
    <item>
      <title>Cmd中mvn_compile出现的问题</title>
      <link>https://zyooo.github.io/bugs/cmd%E4%B8%ADmvn_compile%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 10 Oct 2021 09:41:38 +0800</pubDate>
      
      <guid>https://zyooo.github.io/bugs/cmd%E4%B8%ADmvn_compile%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>在cmd上运行mvn compile时出现编译错误
No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?</description>
    </item>
    
    <item>
      <title>Maven</title>
      <link>https://zyooo.github.io/javadairy/maven/</link>
      <pubDate>Sun, 10 Oct 2021 08:45:35 +0800</pubDate>
      
      <guid>https://zyooo.github.io/javadairy/maven/</guid>
      <description>Apache下的一个项目管理工具
官网地址 maven.apache.org
配置环境目录 1.获得maven文件夹的目录F:\software\apache-maven-3.8.3
2.在环境变量中新建一个新的 系统变量 , MAVEN_HOME ,将文件目录给放上去</description>
    </item>
    
    <item>
      <title>Ideal2021JavaWeb项目配置</title>
      <link>https://zyooo.github.io/note/ideal2021javaweb%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 09 Oct 2021 12:28:42 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/ideal2021javaweb%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</guid>
      <description>Itellidea2021版本中web项目的配置
右键项目名称，选择Add Frameworks Support，勾选Web Application，OK。
添加Tomcat
点右上角
或者菜单栏中Run中的Edit Configurations
这个自己配置</description>
    </item>
    
    <item>
      <title>Windows下redis-Server秒退</title>
      <link>https://zyooo.github.io/bugs/windows%E4%B8%8Bredi-server.exe%E7%A7%92%E9%80%80/</link>
      <pubDate>Sat, 09 Oct 2021 11:49:46 +0800</pubDate>
      
      <guid>https://zyooo.github.io/bugs/windows%E4%B8%8Bredi-server.exe%E7%A7%92%E9%80%80/</guid>
      <description>Windows下redi-server.exe秒退 遇到个问题： 在第一次正常启动之后，配置完conf里的save，再次开启server秒退。
错误信息：QForkMasterInit: system error caught. error code=0x000005af, message=VirtualAllocEx failed.</description>
    </item>
    
    <item>
      <title>Redis&amp;Jedis</title>
      <link>https://zyooo.github.io/javadairy/redisjedis/</link>
      <pubDate>Sat, 09 Oct 2021 11:46:30 +0800</pubDate>
      
      <guid>https://zyooo.github.io/javadairy/redisjedis/</guid>
      <description>redis&amp;amp;Jedis redis 概念：一款高性能的NOSQL系列的非关系型数据库
关系型数据库：MySQL、Oracle…
​	使用表单存储数据，数据之间有关联关系，数据存储在硬盘的文件上
非关系型数据库(NOSQL): redis, hbase…
​	使用键值对去存储数据，数据之间没有关联关系，数据存储在内存中</description>
    </item>
    
    <item>
      <title>2021.10.08</title>
      <link>https://zyooo.github.io/leetcodedairy/20211008/</link>
      <pubDate>Sat, 09 Oct 2021 11:35:50 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20211008/</guid>
      <description>1.旅行终点站 简单 2021.10.08 给你一份旅游线路图，该线路图中的旅行线路用数组 paths 表示，其中 paths[i] = [cityAi, cityBi] 表示该线路将会从 cityAi 直接前往 cityBi 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。题目数据保证线路图会形成一条不存在循环的线路，因此恰有一个旅行终点站。</description>
    </item>
    
    <item>
      <title>BigTalkDesignPattenNote</title>
      <link>https://zyooo.github.io/note/bigtalkdesignpattennote/</link>
      <pubDate>Fri, 08 Oct 2021 14:23:01 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/bigtalkdesignpattennote/</guid>
      <description>大话设计模式读书笔记 1.简单工厂模式 用一个单独的类来做创照实例的过程，这就是工厂
public class OperationFactory{ public static Operation createOperate(string operate){ Operation oper = null; switch(operate){ case &amp;quot;+&amp;quot;: oper = new OperationAdd(); break; case &amp;quot;-&amp;quot;: oper = new OperationSub(); break; case &amp;quot;*&amp;quot;: oper = new OperationMul(); break; case &amp;quot;/&amp;quot;: oper = new OperationMul(); break; } return oper; } }  Operation oper; oper = OperationFactory.</description>
    </item>
    
    <item>
      <title>如何添加右键可选在此处打开命令行窗口</title>
      <link>https://zyooo.github.io/note/note1/</link>
      <pubDate>Fri, 01 Oct 2021 10:05:28 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/note1/</guid>
      <description>如何添加右键可选在此处打开命令行窗口 1.win+r 输入 regedit 回车打开注册表 2.切换到HKEY_CLASSES_ROOT\Directory\Background\shell\ 右键shell，新建项 “OpenCMDHere” 并在该项下，右击新建项 “command” 直接点击OpenCMDHere将OpenCMDHere中的默认改为 在此处打开命令窗口 右键 新建字符串名，名字为Icon将值改为cmd.</description>
    </item>
    
    <item>
      <title>Project</title>
      <link>https://zyooo.github.io/post/project/</link>
      <pubDate>Thu, 30 Sep 2021 17:16:46 +0800</pubDate>
      
      <guid>https://zyooo.github.io/post/project/</guid>
      <description>web尽快过完一遍,直接进入后端框架的学习,做一些SSM框架的东西 基础: 算法, 计网TCP/IP HTTP UDP 等协议, 操作系统, MySQL, 设计模式, Linux基础命令 java: 复习多线程Thread,Runnable, Callable, 池化技术,JVM MySQL的进阶 重点查看索引,事务这方面 《自顶向下计算机网络》《图解HTTP》《mysql技术内幕InnoDB储存引擎》 Redis也要学习 《Redis设计与实现(第二版)》 《大话设计模式》 《鸟哥的Linux私房菜》 《java核心技术卷一》《深入理解java虚拟机》(2,3,6,7章) 《实战java高并发程序设计》《java并发编程的艺术》  每天都需要学习的:</description>
    </item>
    
    <item>
      <title>Blog搭建和我的信息</title>
      <link>https://zyooo.github.io/note/blog%E6%90%AD%E5%BB%BA%E5%92%8C%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Thu, 30 Sep 2021 10:03:39 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/blog%E6%90%AD%E5%BB%BA%E5%92%8C%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF/</guid>
      <description>blog搭建和我的信息 现在已经安装好了hugo 在cmd中输入 hugo version可以查询
创建启动 hugo new site [path] [flags] 创建</description>
    </item>
    
    <item>
      <title>Vocabulary</title>
      <link>https://zyooo.github.io/note/note/</link>
      <pubDate>Wed, 29 Sep 2021 19:08:46 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/note/</guid>
      <description>2021.09.27           flatter vt.</description>
    </item>
    
  </channel>
</rss>
