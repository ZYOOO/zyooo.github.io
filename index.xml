<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ray</title>
    <link>https://zyooo.github.io/</link>
    <description>Recent content on Ray</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Oct 2021 11:49:46 +0800</lastBuildDate>
    
	<atom:link href="https://zyooo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows下redi Server</title>
      <link>https://zyooo.github.io/bugs/windows%E4%B8%8Bredi-server.exe%E7%A7%92%E9%80%80/</link>
      <pubDate>Sat, 09 Oct 2021 11:49:46 +0800</pubDate>
      
      <guid>https://zyooo.github.io/bugs/windows%E4%B8%8Bredi-server.exe%E7%A7%92%E9%80%80/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Redis&amp;Jedis</title>
      <link>https://zyooo.github.io/javadairy/redisjedis/</link>
      <pubDate>Sat, 09 Oct 2021 11:46:30 +0800</pubDate>
      
      <guid>https://zyooo.github.io/javadairy/redisjedis/</guid>
      <description>redis&amp;amp;Jedis redis 概念：一款高性能的NOSQL系列的非关系型数据库
关系型数据库：MySQL、Oracle…
​	使用表单存储数据，数据之间有关联关系，数据存储在硬盘的文件上
非关系型数据库(NOSQL): redis, hbase…
​	使用键值对去存储数据，数据之间没有关联关系，数据存储在内存中
两种数据库并非对立而是互补，关系型用来做数据库，NOSQL用于做缓存、秒杀任务队列、网站访问统计等
去https://redis.io官网下载的只有Linux系统的redis，先用着黑马的Windows绿色版本，等后边部署Linux的时候再使用
key，value； 其中key都是字符串，value有5种不同的数据结构
value：
​	1.字符串类型string
​	2.哈希类型hash：map格式
​	3.列表类型list： linkedlist格式
​	4.集合类型set
​	5.有序集合类型sortedset
**命令操作 ** (更多详细的操作在redis官网文档中有)
字符串类型 string
1. 存储： set key value 127.0.0.1:6379&amp;gt; set username zhangsan OK 2. 获取： get key 127.0.0.1:6379&amp;gt; get username &amp;quot;zhangsan&amp;quot; 3. 删除： del key 127.0.0.1:6379&amp;gt; del age (integer) 1  哈希类型 hash
  存储： hset key field value 127.0.0.1:6379&amp;gt; hset myhash username lisi (integer) 1 127.</description>
    </item>
    
    <item>
      <title>2021.10.08</title>
      <link>https://zyooo.github.io/leetcodedairy/20211008/</link>
      <pubDate>Sat, 09 Oct 2021 11:35:50 +0800</pubDate>
      
      <guid>https://zyooo.github.io/leetcodedairy/20211008/</guid>
      <description>1.旅行终点站 简单 2021.10.08 给你一份旅游线路图，该线路图中的旅行线路用数组 paths 表示，其中 paths[i] = [cityAi, cityBi] 表示该线路将会从 cityAi 直接前往 cityBi 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。题目数据保证线路图会形成一条不存在循环的线路，因此恰有一个旅行终点站。
解题的思路就是遍历一遍paths，取cityB，第二重遍历取cityA，当第二重遍历的cityA等于第一重遍历的cityB时说明这条路线是有出路的，反之当第二重遍历结束后依然没有对应的cityA，说明此时第一重遍历的cityB即为终点。
但是实现方式过于单一，没有去向其他更快捷的方式，导致速度太慢，参考官方题解当中，利用哈希表HashSet去储存一组需要遍历的量，提高速度。
class Solution { public String destCity(List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; paths) { for(int i=0; i&amp;lt;paths.size(); i++){ for(int j=0; j&amp;lt;paths.size(); j++){ if(i!=j &amp;amp;&amp;amp; paths.get(i).get(1).equals(paths.get(j).get(0))){ break; }else if(j==paths.size()-1){ return paths.get(i).get(1); } } } return &amp;#34;&amp;#34;; } } //官方题解 class Solution { public String destCity(List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; paths) { Set&amp;lt;String&amp;gt; citiesA = new HashSet&amp;lt;String&amp;gt;(); for (List&amp;lt;String&amp;gt; path : paths) { citiesA.add(path.get(0)); } for (List&amp;lt;String&amp;gt; path : paths) { if (!</description>
    </item>
    
    <item>
      <title>Bugs</title>
      <link>https://zyooo.github.io/note/bugs/</link>
      <pubDate>Sat, 09 Oct 2021 11:27:25 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/bugs/</guid>
      <description>学习中遇到的一些bug Windows下redi-server.exe秒退 遇到个问题： 在第一次正常启动之后，配置完conf里的save，再次开启server秒退。
错误信息：QForkMasterInit: system error caught. error code=0x000005af, message=VirtualAllocEx failed.: unknown error
**原因：**未设置redis最大内存
**解决：**在conf中最下面加入
maxmemory 268435456 maxheap 314572800 再次启动正常</description>
    </item>
    
    <item>
      <title>JavaWebDairy</title>
      <link>https://zyooo.github.io/note/javawebdairy/</link>
      <pubDate>Sat, 09 Oct 2021 08:41:34 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/javawebdairy/</guid>
      <description>JavaWebDairy 前面有很多笔记没有去做，但是看黑马的笔记也可以，后期遇到再补吧。
redis 概念：一款高性能的NOSQL系列的非关系型数据库
关系型数据库：MySQL、Oracle…
​	使用表单存储数据，数据之间有关联关系，数据存储在硬盘的文件上
非关系型数据库(NOSQL): redis, hbase…
​	使用键值对去存储数据，数据之间没有关联关系，数据存储在内存中
两种数据库并非对立而是互补，关系型用来做数据库，NOSQL用于做缓存、秒杀任务队列、网站访问统计等
去https://redis.io官网下载的只有Linux系统的redis，先用着黑马的Windows绿色版本，等后边部署Linux的时候再使用
key，value； 其中key都是字符串，value有5种不同的数据结构
value：
​	1.字符串类型string
​	2.哈希类型hash：map格式
​	3.列表类型list： linkedlist格式
​	4.集合类型set
​	5.有序集合类型sortedset
**命令操作 ** (更多详细的操作在redis官网文档中有)
字符串类型 string
1. 存储： set key value 127.0.0.1:6379&amp;gt; set username zhangsan OK 2. 获取： get key 127.0.0.1:6379&amp;gt; get username &amp;quot;zhangsan&amp;quot; 3. 删除： del key 127.0.0.1:6379&amp;gt; del age (integer) 1  哈希类型 hash
  存储： hset key field value 127.</description>
    </item>
    
    <item>
      <title>LeetCodeDairy</title>
      <link>https://zyooo.github.io/note/leetcodedairy/</link>
      <pubDate>Fri, 08 Oct 2021 20:46:46 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/leetcodedairy/</guid>
      <description>LeetCodeDairy 1.旅行终点站 简单 2021.10.08 给你一份旅游线路图，该线路图中的旅行线路用数组 paths 表示，其中 paths[i] = [cityAi, cityBi] 表示该线路将会从 cityAi 直接前往 cityBi 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。题目数据保证线路图会形成一条不存在循环的线路，因此恰有一个旅行终点站。
解题的思路就是遍历一遍paths，取cityB，第二重遍历取cityA，当第二重遍历的cityA等于第一重遍历的cityB时说明这条路线是有出路的，反之当第二重遍历结束后依然没有对应的cityA，说明此时第一重遍历的cityB即为终点。
但是实现方式过于单一，没有去向其他更快捷的方式，导致速度太慢，参考官方题解当中，利用哈希表HashSet去储存一组需要遍历的量，提高速度。
class Solution { public String destCity(List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; paths) { for(int i=0; i&amp;lt;paths.size(); i++){ for(int j=0; j&amp;lt;paths.size(); j++){ if(i!=j &amp;amp;&amp;amp; paths.get(i).get(1).equals(paths.get(j).get(0))){ break; }else if(j==paths.size()-1){ return paths.get(i).get(1); } } } return &amp;#34;&amp;#34;; } } //官方题解 class Solution { public String destCity(List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; paths) { Set&amp;lt;String&amp;gt; citiesA = new HashSet&amp;lt;String&amp;gt;(); for (List&amp;lt;String&amp;gt; path : paths) { citiesA.add(path.get(0)); } for (List&amp;lt;String&amp;gt; path : paths) { if (!</description>
    </item>
    
    <item>
      <title>BigTalkDesignPattenNote</title>
      <link>https://zyooo.github.io/note/bigtalkdesignpattennote/</link>
      <pubDate>Fri, 08 Oct 2021 14:23:01 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/bigtalkdesignpattennote/</guid>
      <description>大话设计模式读书笔记 1.简单工厂模式 用一个单独的类来做创照实例的过程，这就是工厂
public class OperationFactory{ public static Operation createOperate(string operate){ Operation oper = null; switch(operate){ case &amp;quot;+&amp;quot;: oper = new OperationAdd(); break; case &amp;quot;-&amp;quot;: oper = new OperationSub(); break; case &amp;quot;*&amp;quot;: oper = new OperationMul(); break; case &amp;quot;/&amp;quot;: oper = new OperationMul(); break; } return oper; } } Operation oper; oper = OperationFactory.createOperate(&amp;quot;+&amp;quot;); oper.NumberA = 1; oper.NumberB = 2; double result = oper.GetResult(); *UML类图 UML类图图示样例
类图 类图分为三层
第一层显示类的名称，如果是抽象类，则就用斜体显示。
第二层是类的特性，通常就是字段和属性。</description>
    </item>
    
    <item>
      <title>如何添加右键可选在此处打开命令行窗口</title>
      <link>https://zyooo.github.io/note/note1/</link>
      <pubDate>Fri, 01 Oct 2021 10:05:28 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/note1/</guid>
      <description>如何添加右键可选在此处打开命令行窗口 1.win+r 输入 regedit 回车打开注册表 2.切换到HKEY_CLASSES_ROOT\Directory\Background\shell\ 右键shell，新建项 “OpenCMDHere” 并在该项下，右击新建项 “command” 直接点击OpenCMDHere将OpenCMDHere中的默认改为 在此处打开命令窗口 右键 新建字符串名，名字为Icon将值改为cmd.exe 创建 OpenCMDHere 的图片 3.修改command最终的默认值 输入 cmd.exe /s /k pushd \&amp;quot;%V\&amp;quot; </description>
    </item>
    
    <item>
      <title>Project</title>
      <link>https://zyooo.github.io/post/project/</link>
      <pubDate>Thu, 30 Sep 2021 17:16:46 +0800</pubDate>
      
      <guid>https://zyooo.github.io/post/project/</guid>
      <description>web尽快过完一遍,直接进入后端框架的学习,做一些SSM框架的东西 基础: 算法, 计网TCP/IP HTTP UDP 等协议, 操作系统, MySQL, 设计模式, Linux基础命令 java: 复习多线程Thread,Runnable, Callable, 池化技术,JVM MySQL的进阶 重点查看索引,事务这方面 《自顶向下计算机网络》《图解HTTP》《mysql技术内幕InnoDB储存引擎》 Redis也要学习 《Redis设计与实现(第二版)》 《大话设计模式》 《鸟哥的Linux私房菜》 《java核心技术卷一》《深入理解java虚拟机》(2,3,6,7章) 《实战java高并发程序设计》《java并发编程的艺术》 每天都需要学习的:
​	java后端知识, CET6, 算法
分阶段去学习的:
​	MySQL强化 java进阶 项目 设计模式 计算机网络 Linux
   任务  途径 每个部分都要写博客记录技术要点     java  先跟着黑马web看完把项目案例做完, 然后转向后端框架的学习   算法  算法第四版配上PTA使用, 后期刷LeetCode和面试题   项目  在项目中去学习MySQL进阶和Linux常用指令集   JVM  看书   计网  看书   设计模式  看书    </description>
    </item>
    
    <item>
      <title>Blog搭建和我的信息</title>
      <link>https://zyooo.github.io/note/blog%E6%90%AD%E5%BB%BA%E5%92%8C%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Thu, 30 Sep 2021 10:03:39 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/blog%E6%90%AD%E5%BB%BA%E5%92%8C%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF/</guid>
      <description>blog搭建和我的信息 现在已经安装好了hugo 在cmd中输入 hugo version可以查询
创建启动 hugo new site [path] [flags] 创建
这里是新创建了一个hugo new site F:\myblog blog
到 themes.gohugo.io里面去下载主题直接在cmd中clone
cd [path]
git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c
然后启动 hugo server -t m10c &amp;ndash;buildDrafts
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
通过本地链接就可以访问了
写一篇文章 hugo new post/hello.md
git 令牌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
生成public文件夹 hugo &amp;ndash;theme=m10c &amp;ndash;baseUrl=&amp;quot;https://zyooo.github.io/&amp;rdquo; &amp;ndash;buildDrafts
每一次添加东西先生成然后commit push
git操作 到public目录下
git add .
git commit -m&amp;rdquo; &amp;quot;
git push origin main</description>
    </item>
    
    <item>
      <title>Vocabulary</title>
      <link>https://zyooo.github.io/note/note/</link>
      <pubDate>Wed, 29 Sep 2021 19:08:46 +0800</pubDate>
      
      <guid>https://zyooo.github.io/note/note/</guid>
      <description>2021.09.27      flatter vt.奉承;自命不凡,使显得更漂亮   thrift n.节约,节俭; 海石竹   contrast n.差异,悬殊;截然不同的实物; vt.对照,对比. vi.有明显差异   pharmacy n.药房,药店;药剂学;配药学   pilgrim n.朝圣者,香客;清教徒前辈移民   glacier n.冰川，冰河   cholesterol n.胆固醇   asylum n.(政治)避难,庇护   corporal n.下士.adj.肉体的,身体的   gauge n.测量仪器,宽度,口径; vt.判断,测量,估算   prosper vi.繁荣,兴旺,发达   surgery n.外科手术;手术室;应诊时间   contingent 依情况而定的,n.代表团   corporate adj.公司的 ; 团体的   collaboration n.</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://zyooo.github.io/heima/test/</link>
      <pubDate>Wed, 29 Sep 2021 18:45:50 +0800</pubDate>
      
      <guid>https://zyooo.github.io/heima/test/</guid>
      <description>黑马视频里的笔记</description>
    </item>
    
  </channel>
</rss>